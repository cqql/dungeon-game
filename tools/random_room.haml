:ruby
  @_next_id = 100

  def next_id
    @_next_id = @_next_id + 1

    @_next_id
  end

  def room id, size_x, size_y
    tiles = []

    (0...size_x).each do |x|
      (0...size_y).each do |y|
        tiles << { x: x * 1000, y: y * 1000, blocking: false }
      end
    end

    {
      id: id,
      tiles: tiles,
      enemies: [],
      teleporters: []
    }
  end

  def with_enemies room, num_enemies
    num_enemies.times do
      room[:enemies] << { id: next_id(), x: Random.rand(20) * 1000, y: Random.rand(20) * 1000, hp: Random.rand(8) + 2, speed: 1000, move_strategy: "NORMAL" }
    end

    room
  end

  def with_teleporter room, x, y, target_room, target_x, target_y
    room[:teleporters] << { x: x * 1000, y: y * 1000, target_id: target_room, target_x: target_x, target_y: target_y }

    room
  end

  levels = []

  [
    { id: "level-1", next_level: "level-2" },
    { id: "level-2", next_level: "level-3" },
    { id: "level-3", next_level: "VICTORY" }
  ].each do |info|
    levels << {
      id: info[:id],
      rooms: [
        with_enemies(room(next_id(), 20, 20), 10)
      ]
    }
  end

- levels.each do |level|
  %level{id: level[:id]}
    - level[:rooms].each do |room|
      %room{id: room[:id]}
        - room[:tiles].each do |tile|
          %tile{blocking: tile[:blocking] ? "true" : "false"}
            %position{x: tile[:x], y: tile[:y]}
        - room[:enemies].each do |enemy|
          %enemy{id: enemy[:id], hitPoints: enemy[:hp]}
            %position{x: enemy[:x], y: enemy[:y]}
        - room[:teleporters].each do |teleporter|
          %teleporter{blocking: "false"}
            %position{x: teleporter[:x], y: teleporter[:y]}
            %target{roomId: teleporter[:target_id], x: teleporter[:target_x], y: teleporter[:target_y]}
